######## CLASSES LOADING SECTION ########

[classes]

# EVolutionary Server uses three classes named Individual, Communicator and Evolver. 
# Any combinations of implementations of the three classes are allowed in 
# the current version.

# Docs are available for every implementation at docs/<implementation name>.
# For example, documentation for the implmentation of the class Individual 
# imported from individuals.trinaryVector resides at docs/individuals.trinaryVector

### Class Individual implementats an evolutionary individual (aka genome, aka 
# candidate solution). Available options:

# trinaryVector        Vector of numbers from {-1,0,1}
# floatVector          Vector of floating point values of fixed decimal precision
# triVecAdvMut         Vector of numbers from {-1,0,1} with advanced mutation operator capable of biasing the search towards or away from sparsity
# triVecAdvMutESWLike  Vector of numbers from {-1,0,1} with advanced mutation operator capable of biasing the search towards or away from sparsity
# triVecESW            Vector of numbers from {-1,0,1} with Espinosa-Soto Wagner - style mutation operator (biased towards critical networks)

individual = triVecAdvMutESWLike

### Class Communicator implements the method for supplying the individuals 
# to the client and getting back the evaluations. Available options:

# unixPipe             Communicates with the client through a pair of named UNIX pipes
# textFile             Communicates with the client through a pair of text files

communicator = unixPipe

### Class Evolver handles selection of the fittest and generation of new 
# individuals. See docs/evolvers.* for descriptions. Available options:

# hillClimber 
# afpo                 recommended
# averagingAfpo
# doubtfulAfpo
# mdpea
# bruteForcePareto
# proportionalEvolver

evolver = proportionalEvolver

############ PARAMS SECTION #############

### Specify the parameters to be used by Individual (indivParams) and 
# Evolver (evolParams) classes.

# Required parameters vary by implementation, the parameters which are 
# not required are ignored. For example, the individuals.floatVector 
# implemetation of the class Individual requires the 'precision' 
# parameter, while for the individuals.trinaryVector 
# implementation this parameter is ignored (if it is present in indivParams). 

# For complete lists of the parameters required by each implementation, 
# see the implementation docs (docs/individuals.* and docs/evolvers.*)

# DO NOT EDIT the 'indivClass' parameter form evolParams - it is required to 
# pass the class Individual to the class Evolver

# Useful values:
# For k=0 connections between inputs and outputs are direct and there are 
# four weights. For other k's:
# k		4k		4k+k^2
# 1		4			5
# 2		8			12
# 3		12		21
#	4		16		32
#	5		20		45
#	6		24		60

[indivParams]
length = 100
mutProbability = 0.05
mutExploration = 0.6
mutInsDelRatio = 0.9

[evolParams]
populationSize = 100
genStopAfter = 2000
initialPopulationType = random

# Evolver parameters include IO options:

# backup = yes
# Will pickle the Evolver at every generation.
# The pickles are stored at ./backups; the folder is created if necessary
# and moved to backups.save if it is not empty.

# logBestIndividual = yes
# Will record the very best genome once every generation at file named
# bestIndividual<randomSeed>.log. File format:
# <generation> <fitness> <bestIndividualID> <bestIndividualGenome>
# File is put in . and overwritten at every restart of the server.

# logPopulation = yes
# Will record the entire population once every generation at files named
# population<randomSeed>_gen<generation>.log. File format:
# <fitness> <bestIndividualID> <bestIndividualGenome>
# Files are put in . and overwritten at every restart of the server.

# printBestIndividual = yes
# printPopulation = yes
# printParetoFront = yes # Works with some Pareto-front based Evolvers
